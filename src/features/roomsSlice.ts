import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { useAppDispatch } from "../app/hooks";
import { RootState, AppThunk } from "../app/store";
import { addRoomToFirebase, fetchRoomsFromFirebase } from "../firebase";

interface Room {
  //TODO: specify the Room type
  name: string;
  id: string;
}

export interface RoomsState {
  rooms: Room[];
}

const initialState: RoomsState = {
  rooms: [],
};

export const fetchRooms = createAsyncThunk("rooms/fetchRooms", async () => {
  const rooms = await fetchRoomsFromFirebase();
  let roomsData: Room[] = [];
  rooms.forEach((room) =>
    roomsData.push({ name: room.data().name, id: room.id })
  );
  return roomsData;
});

interface AddRoomParams {
  dispatch: any;
  roomName: string;
}

export const addRoom = createAsyncThunk(
  "rooms/addRoom",
  async ({ dispatch, roomName }: AddRoomParams) => {
    try {
      await addRoomToFirebase(roomName);
      dispatch(fetchRooms());
    } catch (e) {
      console.log(e);
    }
  }
);

export const roomsSlice = createSlice({
  name: "rooms",
  initialState,
  reducers: {},
  // // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchRooms.fulfilled, (state, action) => {
      state.rooms = action.payload;
    });
  },
});

export const selectRooms = (state: RootState) => state.rooms.rooms;

export default roomsSlice.reducer;
